{"version":3,"file":"flatpickr.directive.d.ts","sources":["flatpickr.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, AfterViewInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport { FlatpickrDefaults, DisableEnableDate, FlatpickrDefaultsInterface } from './flatpickr-defaults.service';\nimport { ControlValueAccessor } from '@angular/forms';\nexport interface FlatPickrOutputOptions {\n    selectedDates: Date[];\n    dateString: string;\n    instance: any;\n}\nexport interface FlatPickrDayCreateOutputOptions extends FlatPickrOutputOptions {\n    dayElement: HTMLElement;\n}\nexport declare const FLATPICKR_CONTROL_VALUE_ACCESSOR: any;\nexport declare class FlatpickrDirective implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n    private elm;\n    private defaults;\n    private renderer;\n    /**\n     * Object-options that can be user for multiple instances of Flatpickr.\n     * Option from this object is applied only if specific option is not specified.\n     * Example:\n     * ```typescript\n     * options: FlatpickrDefaultsInterface = {\n     *      altFormat: 'd/m/Y',   // will be ignored since altFormat is provided via specific attribute\n     *      altInput: true        // will be used since specific attribute is not provided\n     * };\n     * ```\n     * ```html\n     * <input\n     *   class=\"form-control\"\n     *   type=\"text\"\n     *   mwlFlatpickr\n     *   [options]=\"options\"\n     *   altFormat=\"d/m/Y\">\n     * ```\n     */\n    options: FlatpickrDefaultsInterface;\n    /**\n     * Exactly the same as date format, but for the altInput field.\n     */\n    altFormat: string;\n    /**\n     * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n     */\n    altInput: boolean;\n    /**\n     * This class will be added to the input element created by the altInput option.\n     * Note that `altInput` already inherits classes from the original input.\n     */\n    altInputClass: string;\n    /**\n     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n     */\n    allowInput: boolean;\n    /**\n     * Instead of `body`, appends the calendar to the specified node instead.\n     */\n    appendTo: HTMLElement;\n    /**\n     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n     */\n    ariaDateFormat?: string;\n    /**\n     * Whether clicking on the input should open the picker.\n     * You could disable this if you wish to open the calendar manually `with.open()`.\n     */\n    clickOpens: boolean;\n    /**\n     * A string of characters which are used to define how the date will be displayed in the input box.\n     * The supported characters are defined in the table below.\n     */\n    dateFormat: string;\n    /**\n     * Initial value of the hour element.\n     */\n    defaultHour?: number;\n    /**\n     * Initial value of the minute element.\n     */\n    defaultMinute?: number;\n    /**\n     * Initial value of the seconds element.\n     */\n    defaultSeconds?: number;\n    /**\n     * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n     */\n    disable: DisableEnableDate[];\n    /**\n     * Set disableMobile to true to always use the non-native picker.\n     * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n     */\n    disableMobile: boolean;\n    /**\n     * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n     */\n    enable: DisableEnableDate[];\n    /**\n     * Enables time picker.\n     */\n    enableTime: boolean;\n    /**\n     * Enables seconds in the time picker.\n     */\n    enableSeconds: boolean;\n    /**\n     * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n     */\n    formatDate?: (value: any) => string;\n    /**\n     * Adjusts the step for the hour input (incl. scrolling).\n     */\n    hourIncrement: number;\n    /**\n     * Displays the calendar inline.\n     */\n    inline: boolean;\n    /**\n     * The maximum date that a user can pick to (inclusive).\n     */\n    maxDate: string | Date;\n    /**\n     * The minimum date that a user can start picking from (inclusive).\n     */\n    minDate: string | Date;\n    /**\n     * Adjusts the step for the minute input (incl. scrolling).\n     */\n    minuteIncrement: number;\n    /**\n     * Select a single date, multiple dates or a date range.\n     */\n    mode: 'single' | 'multiple' | 'range';\n    /**\n     * HTML for the arrow icon, used to switch months.\n     */\n    nextArrow: string;\n    /**\n     * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n     */\n    noCalendar: boolean;\n    /**\n     * Provide a date for 'today', which will be used instead of \"new Date()\"\n     */\n    now?: Date | string | number;\n    /**\n     * Function that expects a date string and must return a Date object.\n     */\n    parseDate: (str: string) => Date;\n    /**\n     * HTML for the left arrow icon.\n     */\n    prevArrow: string;\n    /**\n     * Show the month using the shorthand version (ie, Sep instead of September).\n     */\n    shorthandCurrentMonth: boolean;\n    /**\n     * The number of months shown.\n     */\n    showMonths: number;\n    /**\n     * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n     */\n    static: boolean;\n    /**\n     * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n     */\n    time24hr: boolean;\n    /**\n     * Enables display of week numbers in calendar.\n     */\n    weekNumbers: boolean;\n    /**\n     * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n     * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n     */\n    getWeek: (date: Date) => string;\n    /**\n     * Custom elements and input groups.\n     */\n    wrap: boolean;\n    /**\n     * Array of plugin instances to use.\n     */\n    plugins: any[];\n    /**\n     * The locale object or string to use for the locale.\n     */\n    locale: object | string;\n    /**\n     * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n     */\n    convertModelValue: boolean;\n    /**\n     * How the month should be displayed in the header of the calendar.\n     */\n    monthSelectorType: 'static' | 'dropdown';\n    /**\n     * Gets triggered once the calendar is in a ready state\n     */\n    flatpickrReady: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the user selects a date, or changes the time on a selected date.\n     */\n    flatpickrChange: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the input value is updated with a new date string.\n     */\n    flatpickrValueUpdate: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the calendar is opened.\n     */\n    flatpickrOpen: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the calendar is closed.\n     */\n    flatpickrClose: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the month is changed, either by the user or programmatically.\n     */\n    flatpickrMonthChange: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Gets triggered when the year is changed, either by the user or programmatically.\n     */\n    flatpickrYearChange: EventEmitter<FlatPickrOutputOptions>;\n    /**\n     * Take full control of every date cell with this output\n     */\n    flatpickrDayCreate: EventEmitter<FlatPickrDayCreateOutputOptions>;\n    private instance;\n    private isDisabled;\n    private initialValue;\n    onChangeFn: (value: any) => void;\n    onTouchedFn: () => void;\n    constructor(elm: ElementRef, defaults: FlatpickrDefaults, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    inputChanged(): void;\n}\n"]}